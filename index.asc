:source-highlighter: pygments
:toc: left
:stem:

= Exercícios de Processamento Digital de Imagens! =
Deusimar Junior <deusimar.junior.055@ufrn.edu.br>


== 1. A Tranformada Discreta de Fourier
O seguinte programa calcula o espectro de uma imagem com uma senoide de 8 períodos, a fim de analisar seu comportamento no domínio da frequência:

=== 1.1 transformada de Fourier da senóide (PNG)
[[exa_hello, Hello]]
[source,python]
.DFT.py
----
import cv2
import numpy as np

def swap_quadrants(image):
    # Se a imagem tiver dimensões ímpares, corta para o tamanho par mais próximo
    image = image[:image.shape[0] & -2, :image.shape[1] & -2]

    center_x = image.shape[1] // 2
    center_y = image.shape[0] // 2

    # Rearranja os quadrantes
    A = image[:center_y, :center_x]
    B = image[:center_y, center_x:]
    C = image[center_y:, :center_x]
    D = image[center_y:, center_x:]

    # Troca os quadrantes (Topo-Esquerda com Baixo-Direita)
    tmp = np.copy(A)
    A[:], D[:] = D, tmp

    # Troca o quadrante (Topo-Direita com Baixo-Esquerda)
    tmp = np.copy(C)
    C[:], B[:] = B, tmp

def main():
    # Lê a imagem em escala de cinza
    image = cv2.imread("senoide.png", cv2.IMREAD_GRAYSCALE)
    if image is None:
        print("Erro ao abrir a imagem")
        return

    # Expande a imagem para o tamanho ótimo para a transformada de Fourier
    dft_M = cv2.getOptimalDFTSize(image.shape[0])
    dft_N = cv2.getOptimalDFTSize(image.shape[1])
    padded = cv2.copyMakeBorder(image, 0, dft_M - image.shape[0], 0, dft_N - image.shape[1], cv2.BORDER_CONSTANT, value=0)

    # Prepara a matriz complexa
    complex_image = cv2.merge([padded.astype(float), np.zeros_like(padded, dtype=float)])

    # Calcula a Transformada de Fourier Discreta (DFT)
    complex_image = cv2.dft(complex_image)
    swap_quadrants(complex_image)

    # Separa a imagem complexa em partes real e imaginária
    planos = cv2.split(complex_image)

    # Calcula magnitude e fase
    magn, fase = cv2.cartToPolar(planos[0], planos[1], angleInDegrees=False)
    fase = cv2.normalize(fase, None, 0, 1, cv2.NORM_MINMAX)

    # Calcula o log da magnitude
    magn += 1
    magn = np.log(magn)
    magn = cv2.normalize(magn, None, 0, 1, cv2.NORM_MINMAX)

    # Exibe as imagens processadas
    cv2.imshow("Imagem Original", image)
    cv2.imshow("Espectro de Magnitude", magn)
    cv2.imshow("Espectro de Fase", fase)

    cv2.waitKey(0)
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()

----
O código processa uma imagem em escala de cinza usando a Transformada de Fourier Discreta (DFT), uma técnica que destaca as características de frequência da imagem. Ele ajusta a imagem para a DFT, troca os quadrantes para facilitar a visualização, e calcula a magnitude e a fase.
O resultado final exibe a imagem original, o espectro de magnitude e o espectro de fase. Em suma, o código oferece uma análise no domínio da frequência da imagem para destacar padrões e informações relevantes.

A figura <<q1-a.png>> mostra como ficou a saida

[[fig_alo, Alo]]
.Saída do programa negativo.py
image::q1-a.png[title="Saída do DFT"]

É possível observar os pontos mais próximos ao centro, que representam os espectros da senoide. Entretanto, as operações de leitura/gravação de imagens e o armazenamento em formato PNG podem introduzir erros discretos e quantização, os quais podem se manifestar como componentes espectrais adicionais.

=== 1.2 transformada de Fourier da senóide (YAML)

[[exa_hello, Hello]]
[source,python]
.DFT.py
----
import cv2
import numpy as np

def swap_quadrants(image):
    # Se a imagem tiver dimensões ímpares, corta para o tamanho par mais próximo
    image = image[:image.shape[0] & -2, :image.shape[1] & -2]

    center_x = image.shape[1] // 2
    center_y = image.shape[0] // 2

    # Rearranja os quadrantes
    A = image[:center_y, :center_x]
    B = image[:center_y, center_x:]
    C = image[center_y:, :center_x]
    D = image[center_y:, center_x:]

    # Troca os quadrantes (Topo-Esquerda com Baixo-Direita)
    tmp = np.copy(A)
    A[:], D[:] = D, tmp

    # Troca o quadrante (Topo-Direita com Baixo-Esquerda)
    tmp = np.copy(C)
    C[:], B[:] = B, tmp

def main():
    # Lê a imagem em escala de cinza
    yml_file = "senoides.yml"
    fs = cv2.FileStorage(yml_file, cv2.FILE_STORAGE_READ)
    image = fs.getNode("mat").mat()
    fs.release()

    image = cv2.normalize(image, None, 0, 255, cv2 NORM_MINMAX)

    if image is None:
        print("Erro ao abrir a imagem")
        return

    # Expande a imagem para o tamanho ótimo para a transformada de Fourier
    dft_M = cv2.getOptimalDFTSize(image.shape[0])
    dft_N = cv2.getOptimalDFTSize(image.shape[1])
    padded = cv2.copyMakeBorder(image, 0, dft_M - image.shape[0], 0, dft_N - image.shape[1], cv2.BORDER_CONSTANT, value=0)

    # Prepara a matriz complexa
    complex_image = cv2.merge([padded.astype(float), np.zeros_like(padded, dtype=float)])

    # Calcula a Transformada de Fourier Discreta (DFT)
    complex_image = cv2.dft(complex_image)
    swap_quadrants(complex_image)

    # Separa a imagem complexa em partes real e imaginária
    planos = cv2.split(complex_image)

    # Calcula magnitude e fase
    magn, fase = cv2.cartToPolar(planos[0], planos[1], angleInDegrees=False)
    fase = cv2.normalize(fase, None, 0, 1, cv2.NORM_MINMAX)

    # Calcula o log da magnitude
    magn += 1
    magn = np.log(magn)
    magn = cv2.normalize(magn, None, 0, 1, cv2.NORM_MINMAX)

    # Exibe as imagens processadas
    cv2.imshow("Imagem Original", image)
    cv2.imshow("Espectro de Magnitude", magn)
    cv2.imshow("Espectro de Fase", fase)

    cv2.waitKey(0)
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()

----

A figura <<q1-b>> mostra como ficou a saida para um arquivo yaml

[[fig_alo, quadrante]]
.Saída do programa negativo.py
image::q1-b.png[title="Saída do programa DFT"]

Neste caso, a resposta se aproxima mais da teoria devido ao fato de que os valores não foram significativamente afetados por quantização durante a compressão. Consequentemente, não observamos o surgimento de novas frequências para representar os valores da senoide.

== 2.Filtragem no Domínio da Frequência 

Ao empregar o programa exemplos/dftfilter.cpp como ponto de partida, desenvolvi uma implementação do filtro homomórfico com o objetivo de aprimorar imagens afetadas por iluminação irregular. Para realizar essa tarefa, criei uma cena propositalmente mal iluminada, visando simular condições desafiadoras. Ajustei os parâmetros do filtro homomórfico de maneira criteriosa para corrigir as irregularidades de iluminação de forma otimizada

[source,python]
.homomorfico.py
----
import cv2
import numpy as np

def homomorphic_filter(image, cutoff_freq_low, cutoff_freq_high, gamma_low, gamma_high):
    # Converter a imagem para float32
    image_float32 = np.float32(image)

    # Aplicar a transformação logarítmica
    log_image = np.log1p(image_float32)

    # Realizar a Transformada de Fourier (FFT)
    fft_image = np.fft.fft2(log_image)

    # Criar o filtro
    rows, cols = image.shape
    filtro = np.zeros((rows, cols), dtype=np.float32)

    for i in range(rows):
        for j in range(cols):
            d = np.sqrt((i - rows/2)**2 + (j - cols/2)**2)
            filtro[i, j] = (gamma_high - gamma_low) * (1 - np.exp(-cutoff_freq_low * (d**2) / (cutoff_freq_high - cutoff_freq_low))) + gamma_low

    # Aplicar o filtro no domínio da frequência
    fft_filtrada = fft_image * filtro

    # FFT inversa
    inversa_fft = np.fft.ifft2(fft_filtrada)

    # Transformação exponencial
    imagem_exp = np.expm1(np.real(inversa_fft))

    # Normalizar para exibição
    resultado = cv2.normalize(imagem_exp, None, 0, 255, cv2.NORM_MINMAX)
    resultado = np.uint8(resultado)

    return resultado

if __name__ == "__main__":
    # Carregar a imagem
    imagem = cv2.imread("homomorfica.png", cv2.IMREAD_GRAYSCALE)

    # Aplicar o filtro homomórfico
    imagem_filtrada = homomorphic_filter(imagem, cutoff_freq_low=0.1, cutoff_freq_high=30, gamma_low=25, gamma_high=1)

    # Exibir o resultado
    cv2.imshow("Filtro Homomórfico", imagem_filtrada)
    cv2.imshow("Original", imagem)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
----

Inicialmente, a imagem é transformada logaritmicamente para realçar detalhes e normalizada para o formato float32 e em seguida, a FFT é aplicada, seguida pela criação e aplicação de um filtro no domínio da frequência. O filtro é projetado para controlar a influência de diferentes frequências na imagem resultante. Após a aplicação do filtro, é realizada a inversa da FFT e uma transformação exponencial para recuperar a imagem original. A imagem resultante é normalizada para exibição e comparada com a imagem original. O resultado pode ser visto na Figura 3.

.Saída do programa homomorfico.py
image::homomorfico.png[title="Saída do programa homomorfico.py "]

== 3.Segmentação de imagens (cannypoints.py)

Ao implementar o programa cannypoints.py, tomei como referência os códigos de exemplo canny.py e pontilhismo.py. A proposta foi integrar as características distintivas do algoritmo de detecção de bordas Canny para aprimorar a qualidade da imagem pontilhista resultante. Na minha abordagem, optei por utilizar a informação das bordas detectadas pelo algoritmo de Canny de maneira específica, utilizando as posições dos pixels de borda identificados para desenhar pontos nos locais correspondentes na imagem gerada pelo programa em Python. 

[source,python]
.cannypoints.py
---- 
import numpy as np
import random
import cv2  # É necessário importar a biblioteca OpenCV

STEP = 3  # Tamanho do passo para percorrer as bordas
JITTER = 3  # Valor de ajuste aleatório para posicionar os pontos de maneira irregular
RAIO = 10  # Raio dos círculos a serem desenhados

# Defina os parâmetros manualmente
top_slider = 5  # Ajuste manualmente
TrackbarName = "Threshold inferior"

image = cv2.imread("lena.jpg", cv2.IMREAD_GRAYSCALE)

if image is None:
    print("Could not open or find the image")
else:
    height, width = image.shape

    # Utilizando as bordas para desenhar pontos na imagem gerada
    points = np.full_like(image, 255, dtype=np.uint8)  # Inicializa uma imagem com fundo branco

    edges = cv2.Canny(image, top_slider, 3 * top_slider)  # Aplica o detector de bordas de Canny

    yrange, xrange = np.where(edges > 0)  # Obtém as coordenadas dos pixels de borda

    for x, y in zip(xrange, yrange):
        for _ in range(STEP):
            # Adiciona um componente aleatório para posicionar os pontos de maneira irregular
            xi = x + random.randint(-JITTER, JITTER + 1)
            yi = y + random.randint(-JITTER, JITTER + 1)
            
            # Garante que os pontos não ultrapassem os limites da imagem
            xi = max(0, min(xi, width - 1))
            yi = max(0, min(yi, height - 1))
            
            # Obtém o valor de intensidade do pixel para definir a cor do círculo
            gray = int(image[yi, xi])
            
            # Desenha um círculo na imagem de pontos
            cv2.circle(points, (xi, yi), RAIO, (gray, gray, gray), thickness=cv2.FILLED, lineType=cv2.LINE_AA)

    # Exibe a imagem resultante
    cv2.imshow("Pontos", points)
    cv2.waitKey(0)
    
    # Salva a imagem resultante
    cv2.imwrite("pontos_com_bordas.png", points)

# Fecha as janelas abertas
cv2.destroyAllWindows()
----

Este código Python utiliza a biblioteca OpenCV para realizar uma operação de pontilhismo dinâmico em uma imagem em tons de cinza. Primeiramente, o programa lê uma imagem, como exemplificado pela imagem "lena.jpg". Em seguida, aplica o detector de bordas de Canny para identificar regiões de alta variação de intensidade, representando bordas na imagem original. As coordenadas desses pixels de borda são então utilizadas para posicionar círculos na imagem resultante. Cada ponto é colocado com um deslocamento aleatório (jitter) para evitar uma disposição regular e conferir um caráter mais orgânico à representação. A intensidade dos pixels na imagem original determina a cor dos círculos, onde a sobreposição de círculos destaca as características de borda. 
Uma observação: deixei a sensibilidade de canny alta, pois quanto menos bordas forem encontradas menos pontos são colocados, uma boa solução seria aumentar o raio das bordas nesse caso.

.Saída do programa cannypoints.py
image::pontilhismoCany.png[title="Saída do programa cannypoints.py "]


== 4.Quantização vetorial com k-means

Ao abordar a implementação do algoritmo K-Means, optei por realizar 10 rodadas distintas do algoritmo, especificando a inicialização dos centros de forma aleatória através do parâmetro KMEANS_RANDOM_CENTERS. Essa escolha visa explorar a influência da inicialização na estabilidade e consistência dos agrupamentos:

[source,python]
.k-means.py
---- 
import cv2
import numpy as np

# Número de clusters desejados
nClusters = 8

# Número de rodadas do algoritmo K-Means
nRodadas = 1

# Carregar a imagem
img = cv2.imread("sushi.jpg", cv2.IMREAD_COLOR)

# Reformatar a imagem para um vetor de amostras
samples = img.reshape((-1, 3)).astype(np.float32)

# Critérios de parada para o algoritmo K-Means
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10000, 0.0001)

# Inicializar centros de forma aleatória
flags = cv2.KMEANS_RANDOM_CENTERS
_, labels, centers = cv2.kmeans(samples, nClusters, None, criteria, nRodadas, flags)

# Criar imagem rotulada com base nos centros encontrados
rotulada = centers[labels].reshape(img.shape).astype(np.uint8)

# Exibir a imagem resultante da primeira rodada e salvar
cv2.imshow("kmeans", rotulada)
cv2.imwrite("saida_random_centers_rodada_1.jpg", rotulada)
cv2.waitKey(0)

# Realizar 9 rodadas adicionais
for rodada in range(2, 11):
    _, labels, centers = cv2.kmeans(samples, nClusters, None, criteria, nRodadas, flags)
    rotulada = centers[labels].reshape(img.shape).astype(np.uint8)
    cv2.imwrite(f"saida_random_centers_rodada_{rodada}.jpg", rotulada)

# Fechar as janelas abertas
cv2.destroyAllWindows()

----

Inicialmente, a imagem é convertida em um vetor de amostras, onde cada amostra corresponde a um pixel com três componentes de cor. O algoritmo K-Means é então empregado com a configuração de oito clusters e uma única rodada (nRodadas=1).A inicialização dos centros é realizada de forma aleatória (KMEANS_RANDOM_CENTERS). A imagem resultante da primeira iteração é exibida e salva. Em seguida, o algoritmo é executado em mais nove rodadas, cada uma gerando uma imagem rotulada e salva. 

Ao longo das múltiplas rodadas, a variabilidade nas imagens resultantes pode ser observada devido à inicialização aleatória dos centros. Isso destaca a influência significativa que as condições iniciais têm no processo de agrupamento. Cada imagem captura diferentes nuances na segmentação de cores, revelando a sensibilidade do algoritmo K-Means à escolha inicial dos centros. O uso de múltiplas rodadas proporciona uma perspectiva mais abrangente dos agrupamentos possíveis, destacando a natureza estocástica do algoritmo e a necessidade de avaliar sua robustez frente a diferentes condições iniciais.

.Saída do programa k-means.py
image::k-means(1).jpg[title="Saída do programa k-means.py, laço 0 "]
.Saída do programa k-means.py
image::k-means(2).jpg[title="Saída do programa k-means.py, laço 1"]
.Saída do programa k-means.py
image::k-means(3).jpg[title="Saída do programa k-means.py, laço 2"]
.Saída do programa k-means.py
image::k-means(4).jpg[title="Saída do programa k-means.py, laço 3 "]
.Saída do programa k-means.py
image::k-means(5).jpg[title="Saída do programa k-means.py, laço 4 "]
.Saída do programa k-means.py
image::k-means(6).jpg[title="Saída do programa k-means.py, laço 5 "]
.Saída do programa k-means.py
image::k-means(7).jpg[title="Saída do programa k-means.py, laço 6 "]
.Saída do programa k-means.py
image::k-means(8).jpg[title="Saída do programa k-means.py, laço 7 "]
.Saída do programa k-means.py
image::k-means(9).jpg[title="Saída do programa k-means.py, laço 8 "]
.Saída do programa k-means.py
image::k-means(10).jpg[title="Saída do programa k-means.py, laço 9 "]


== 5.Filtragem de forma com morfologia matemática

Para superar desafios no reconhecimento de caracteres em visores segmentados, propõe-se um programa baseado em operações morfológicas, utilizando morfologia.cpp. O objetivo é otimizar o reconhecimento de dígitos. A preservação da separação do ponto decimal é crucial para evitar equívocos no reconhecimento numérico.

[source,python]
.correcaoDigito.py
---- 
import cv2
import numpy as np

def pre_processamento(image_path):
    # Carregar a imagem
    image = cv2.imread(image_path, cv2.IMREAD_UNCHANGED)

    if image is None:
        print("Erro ao carregar a imagem:", image_path)
        return None

    # Elemento estruturante
    str_element = cv2.getStructuringElement(cv2.MORPH_RECT, (1, 10))

    # Erosão para unir os segmentos
    eroded = cv2.erode(image, str_element)
    
    # Dilatação para recuperar a forma original, mantendo os segmentos unidos
    dilated = cv2.dilate(eroded, str_element)

    # Exibição da imagem de pré-processamento
    cv2.imshow("Pré-processamento", dilated)
    cv2.waitKey(0)

    return dilated

# Exemplo de uso
imagem_pre_processada = pre_processamento("digitos-2.png")

----

O elemento estruturante (str_element), definido como um retângulo de dimensões (1, 10), é projetado para unir segmentos verticalmente, sendo uma dimensão estratégica para preservar a separação horizontal entre os dígitos. Essa escolha específica (1, 10) é crucial para evitar a união do ponto decimal com os dígitos adjacentes, garantindo a correta interpretação numérica. A sequência de operações, erosão e dilatação, é executada de maneira a unir os segmentos do dígito verticalmente, contribuindo para a coesão do caractere reconhecido. O resultado final do pré-processamento pode ser visto a seguir: 

.Saída do programa k-means.py
image::dig1.png[title="Saída do programa correcaoDigito.py"]
.Saída do programa k-means.py
image::dig2.png[title="Saída do programa correcaoDigito.py"]